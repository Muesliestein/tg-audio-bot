require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require("express");
const fs = require('fs-extra');
const path = require('path');
const { exec } = require('child_process');

const bot = new TelegramBot(process.env.TOKEN, { 
    polling: {
        interval: 500,
        autoStart: true
    }
});

const MEMES_FILE = path.join(__dirname, 'memes.json');
const MEMES_DIR = path.join(__dirname, 'memes');
const RAILWAY_URL = "https://tg-audio-bot-production.up.railway.app"; // URL —Å–µ—Ä–≤–µ—Ä–∞ Railway

// üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ —Ñ–∞–π–ª–æ–≤
const app = express();
const PORT = process.env.PORT || 8080;

app.use("/memes", express.static(MEMES_DIR, {
    setHeaders: (res) => {
        res.setHeader("Content-Type", "audio/ogg"); // MIME-—Ç–∏–ø –¥–ª—è –∞—É–¥–∏–æ
    }
}));

app.listen(PORT, () => console.log(`üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${PORT}`));

// üóÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª–∞ —Å –º–µ–º–∞–º–∏
if (!fs.existsSync(MEMES_DIR)) fs.mkdirSync(MEMES_DIR);
if (!fs.existsSync(MEMES_FILE)) fs.writeFileSync(MEMES_FILE, JSON.stringify({}));

// üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–º–æ–≤
let memes = JSON.parse(fs.readFileSync(MEMES_FILE, 'utf-8'));

// üîç –í—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã –≤ –ª–æ–≥–∞—Ö
console.log("üìÇ –ü–∞–ø–∫–∞ —Å –º–µ–º–∞–º–∏:", MEMES_DIR);
console.log("üìÑ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ /memes:", fs.readdirSync(MEMES_DIR));

// üé§ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ OGG (Opus) –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const convertToOgg = (inputPath, outputPath, callback) => {
    exec(`ffmpeg -i "${inputPath}" -c:a libopus -b:a 32k -ar 48000 -ac 1 "${outputPath}"`, (err) => {
        if (err) {
            console.error("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", err);
            callback(false);
        } else {
            callback(true);
        }
    });
};

// üì© –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /list, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ–º–µ–º—ã. –í –≥—Ä—É–ø–ø–∞—Ö –º–æ–∂–µ—à—å –≤—ã–∑—ã–≤–∞—Ç—å –º–µ–Ω—è —á–µ—Ä–µ–∑ @bot_name.");
});

// üìú –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–º–æ–≤
bot.onText(/\/list/, (msg) => {
    const chatId = msg.chat.id;
    if (Object.keys(memes).length === 0) {
        return bot.sendMessage(chatId, "–ú–µ–º–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.");
    }

    const memeList = Object.keys(memes).map(m => `/play ${m}`).join("\n");
    bot.sendMessage(chatId, `üé§ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ–º–µ–º—ã:\n${memeList}`);
});

// üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–µ–º–æ–≤
bot.onText(/^\/play (.+)$/, (msg, match) => {
    const chatId = msg.chat.id;
    const memeKey = match[1].trim();

    if (!memes[memeKey]) {
        return bot.sendMessage(chatId, "‚ùå –ú–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    const filePath = path.join(MEMES_DIR, memes[memeKey]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ MP3/WAV ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º)
    const fileExt = path.extname(filePath).toLowerCase();
    if (fileExt !== ".ogg") {
        const convertedPath = filePath.replace(fileExt, ".ogg");
        convertToOgg(filePath, convertedPath, (success) => {
            if (success) {
                memes[memeKey] = convertedPath;
                fs.writeFileSync(MEMES_FILE, JSON.stringify(memes, null, 2));
                bot.sendVoice(chatId, fs.createReadStream(convertedPath));
            } else {
                bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –º–µ–º–∞.");
            }
        });
    } else {
        bot.sendVoice(chatId, fs.createReadStream(filePath));
    }
});

// üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞ inline-—Ä–µ–∂–∏–º–∞ (–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö —á–µ—Ä–µ–∑ @bot_name)
bot.on('inline_query', async (query) => {
    console.log("üîπ Inline-–∑–∞–ø—Ä–æ—Å:", query.query);

    const results = Object.keys(memes).map((memeKey, index) => {
        const fileUrl = `${RAILWAY_URL}/memes/${memes[memeKey]}`;
        console.log(`üéµ –§–æ—Ä–º–∏—Ä—É–µ–º inline-–æ—Ç–≤–µ—Ç: ${memeKey} ‚Üí ${fileUrl}`);

        return {
            type: "voice",
            id: String(index),
            title: memeKey,
            voice_url: fileUrl,
            mime_type: "audio/ogg"
        };
    });

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ inline:", results);

    bot.answerInlineQuery(query.id, results, { cache_time: 0 });
});

// üî¥ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
bot.on('polling_error', console.error);

console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
